<?xml version="1.0" encoding="ISO-8859-1" ?>

<testType type="ST">
  <testSUT lib="msgLib" version="1.0">

    <testMod mod="_proto_Srv.h">

      <include>"main.h"</include>
      <include>"utLib/msg.h"</include>

      <codeMod>
        <statement>void test_msgLib_Srv(void);</statement>
        <statement>void sock_srv(void);</statement>
        <statement>void mq_srv(void);</statement>
      </codeMod>

    </testMod>

    <testMod mod="main_Srv">

      <include>"_proto_Srv.h"</include>

      <codeMod func="int main(void)">
        <statement>
          init();
          hdr("Starting to run the test cases.");

          test_msgLib_Srv();

          hdr("Test case run finished execution.");
          fin();
          return(0);
        </statement>
      </codeMod>

    </testMod>

    <testMod mod="msgLib_Srv">

      <include>"_proto_Srv.h"</include>

      <codeMod func="void sock_srv(void)">
        <lvariable>msg_base msg = 0</lvariable>
        <lvariable>msg_base msg_peer = 0</lvariable>
        <lvariable>struct msg_addrType self, peer</lvariable>
        <lvariable>int cnt = 0</lvariable>
        <lvariable>char buf1[10]</lvariable>
        <lvariable>char buf2[10]</lvariable>
        <lvariable>struct vec_ioType vec</lvariable>
        <lvariable>struct iovec iov[2]</lvariable>
        <statement>
          SET_ZERO(self);
          SET_ZERO(peer);
          strcpy(self.nodeID, "localhost");
          strcpy(self.appID, "5000");
          iov[0].iov_base = buf1;
          iov[0].iov_len = sizeof(buf1);
          iov[1].iov_base = buf2;
          iov[2].iov_len = sizeof(buf2);
          vec.ioVecPtr = iov;
          vec.vecCount = 1;
        </statement>
        <testCase typ="ST">
          <cmd> retVal = msg_baseInit(&amp;msg, iMObj) </cmd>
          <desc> "Initializing the message base" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_setAddr(msg, MSG_STREAM, &amp;self, NULL) </cmd>
          <desc> "Setting address (self)" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_setOptions(msg, MSG_REUSE_ADDR, true) </cmd>
          <desc> "Setting address resuse" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_bind(msg) </cmd>
          <desc> "Binding address (self)" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_listen(msg, 5) </cmd>
          <desc> "listening on self address " </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_accept(msg, &amp;msg_peer, &amp;peer) </cmd>
          <desc> "Accepting new connections" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_recvVec(msg_peer, &amp;cnt, &amp;vec) </cmd>
          <desc> "Receving new message" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_baseFin(&amp;msg, iMObj) </cmd>
          <desc> "Finalizing the message base" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
      </codeMod>

      <codeMod func="void mq_srv(void)">
        <lvariable>msg_base msg = 0</lvariable>
        <lvariable>struct msg_addrType self, peer</lvariable>
        <lvariable>int cnt = 0</lvariable>
        <lvariable>priority_t priority = 0</lvariable>
        <lvariable>char buf[10]</lvariable>
        <statement>
          SET_ZERO(self);
          SET_ZERO(peer);
          strcpy(self.nodeID, "localhost");
          strcpy(self.appID, "6000");
        </statement>
        <testCase typ="ST">
          <cmd> retVal = msg_baseInit(&amp;msg, iMObj) </cmd>
          <desc> "Initializing the message base" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_setAddr(msg, MSG_PMSGQ, &amp;self, NULL) </cmd>
          <desc> "Setting address (self)" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_recvBuf(msg, &amp;cnt, buf,
          sizeof(buf), &amp;priority) </cmd>
          <desc> "Receving new message" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <statement>
          sleep(1);
        </statement>
        <testCase typ="ST">
          <cmd> retVal = msg_unlink(msg) </cmd>
          <desc> "Unlinking the message base" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
        <testCase typ="ST">
          <cmd> retVal = msg_baseFin(&amp;msg, iMObj) </cmd>
          <desc> "Finalizing the message base" </desc>
          <cond> retVal </cond>
          <err> retVal </err>
          <errStr> ec2ES(retVal) </errStr>
          <flags> 0 </flags>
        </testCase>
      </codeMod>

      <currMod>
        <statement>
          sock_srv();
          mq_srv();
        </statement>
      </currMod>

    </testMod>

  </testSUT>
</testType>
